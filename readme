Social Media Microservices Project

This is a Node.js-based social media microservices architecture. It includes the following services:

API Gateway (port: 3000)

Identity Service (port: 3001)

Post Service (port: 3002)

Media Service (port: 3003)

Each service is modular and communicates with each other over HTTP or via messaging (e.g., RabbitMQ). The architecture ensures scalability, maintainability, and separation of concerns.

🛠️ Tech Stack

Node.js, Express.js

MongoDB with Mongoose

JWT for authentication

argon2, bcrypt for password hashing

Multer, Cloudinary for media uploads

Winston for logging

Joi for input validation

rate-limit, rate-limit-express, rate-limit-flexible for rate limiting

📦 Microservices Overview

🔐 Identity Service (Port 3001)

User registration & login

Password hashing (argon2 / bcrypt)

JWT authentication

User model with MongoDB

📝 Post Service (Port 3002)

Create, read, delete posts

Connects with Media service to handle image/video

On delete, communicates with media service and removes Cloudinary media

📷 Media Service (Port 3003)

Handles file uploads via Multer

Stores media in Cloudinary

Provides media deletion feature

Saves metadata in MongoDB

🌐 API Gateway (Port 3000)

Routes requests to the appropriate microservices

Central point for rate limiting, security headers, and logging

Acts as a reverse proxy

🧪 Common Utilities

Logger: Winston-based logger used across services

Validator: Joi schema for validating requests

Auth Middleware: Validates JWT token in API Gateway

Rate Limiters: Added via rate-limit, rate-limit-express, or rate-limit-flexible


📂 Folder Structure

/social-media-microservices
│
├── api-gateway
│   └── server.js, middleware, utils
│
├── identity
│   └── server.js, models, controllers, routes, database, utils, middleware
│
├── post
│   └── server.js, models, controllers, routes, database, utils, middleware
│
├── media
    └── server.js, models, controllers, routes, database, utils, middleware


🚀 Running Locally

Each service can be started independently:
# Start API Gateway
cd gateway && npm install && npm run dev

# Start Identity Service
cd identity && npm install && npm run dev

# Start Post Service
cd post && npm install && npm run dev

# Start Media Service
cd media && npm install && npm run dev


☁️ Deployment on Render

1. Push each service as separate GitHub repos or in subfolders.

2. Deploy each one as a separate Web Service on Render.

📜 License

MIT © 2025 Abhishek Mourya